# # src/core/prd_generator.py
# from docx import Document
# from tools.normalize_prd import normalize_prd
# def generate_prd_docx(title, history, prd_state):
#     prd_state = normalize_prd(prd_state)
#     doc = Document()

#     doc.add_heading(f"PRD: {title}", 0)
#     doc.add_heading("Changelog", level=1)
#     doc.add_paragraph("Auto-generated by ProductHive.\n")

#     doc.add_heading("Related Documents", level=1)
#     doc.add_paragraph("")

#     doc.add_heading("Introduction", level=1)
#     doc.add_paragraph(prd_state.get("introduction", "N/A"))

#     doc.add_heading("Customer needs, market and business model", level=1)
#     doc.add_paragraph(prd_state.get("customer_needs", "N/A"))

#     doc.add_heading("Known customers and customer requests", level=2)
#     doc.add_paragraph(prd_state.get("known_requests", "N/A"))

#     doc.add_heading("Quantitative customer data", level=2)
#     doc.add_paragraph(prd_state.get("customer_data", "N/A"))

#     doc.add_heading("Business model and pricing", level=2)
#     doc.add_paragraph(prd_state.get("business_model", "N/A"))

#     doc.add_heading("Expected results", level=1)
#     doc.add_paragraph(prd_state.get("expected_results", "N/A"))

#     doc.add_heading("Marketing and Communication", level=1)
#     doc.add_paragraph(prd_state.get("marketing_plan", "N/A"))

#     doc.add_heading("Key metrics", level=2)
#     doc.add_paragraph(prd_state.get("metrics", "N/A"))

#     doc.add_heading("Terms and copy", level=2)
#     doc.add_paragraph(prd_state.get("terms", "N/A"))

#     doc.add_heading("Personas", level=1)
#     for p in prd_state.get("personas", []):
#         doc.add_paragraph(f"- {p}")

#     doc.add_heading("Functional Requirements", level=1)
#     for f in prd_state.get("features", []):
#         doc.add_paragraph(f"- {f}")

#     doc.add_heading("Non-Functional Requirements", level=1)
#     for nf in prd_state.get("non_functional", []):
#         doc.add_paragraph(f"- {nf}")

#     doc.add_heading("Design", level=1)
#     doc.add_paragraph(prd_state.get("design_notes", "N/A"))

#     doc.add_heading("Technical Specifications", level=1)
#     doc.add_paragraph(prd_state.get("technical_specs", "N/A"))

#     return doc
# src/core/prd_generator.py
from docx import Document
from tools.normalize_prd import normalize_prd

PRD_SECTIONS = [
    ("Introduction",            "introduction"),
    ("Customer Needs / Market / Business Model", "customer_needs"),
    ("Known Customers & Requests",      "known_requests"),
    ("Quantitative Customer Data",      "customer_data"),
    ("Business Model & Pricing",        "business_model"),
    ("Expected Results",       "expected_results"),
    ("Marketing & Communication",       "marketing_plan"),
    ("Key Metrics",            "metrics"),
    ("Terms & Copy",           "terms"),
    ("Personas",               "personas"),
    ("Functional Requirements","features"),
    ("Nonâ€‘Functional Requirements","non_functional"),
    ("Design Notes",           "design_notes"),
    ("Technical Specifications","technical_specs"),
]

def generate_prd_docx(title, history, prd_state):
    prd_state = normalize_prd(prd_state)
    doc = Document()

    # Title
    doc.add_heading(f"PRD: {title}", level=0)
    doc.add_heading("Changelog", level=1)
    doc.add_paragraph("Auto-generated by ProductHive.\n")

    doc.add_heading("Related Documents", level=1)
    doc.add_paragraph("")  # you can insert links here

    # Loop through each section, handling lists vs strings
    for heading, key in PRD_SECTIONS:
        content = prd_state.get(key, None)
        doc.add_heading(heading, level=1)

        if isinstance(content, list):
            if content:
                for item in content:
                    doc.add_paragraph(item, style="List Bullet")
            else:
                doc.add_paragraph("(No entries)")
        else:
            text = str(content or "").strip()
            if text:
                for line in text.split("\n"):
                    doc.add_paragraph(line)
            else:
                doc.add_paragraph("(No entries)")

    return doc
